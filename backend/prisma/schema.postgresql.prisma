// PostgreSQL Production Schema
// This is your Prisma schema file for PostgreSQL production deployment

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  username    String   @unique
  email       String   @unique
  passwordHash String   @map("password_hash")
  avatarUrl   String?  @map("avatar_url")
  settings    String   @default("{}")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  deletedAt   DateTime? @map("deleted_at")

  prompts     Prompt[]
  categories  Category[]
  tags        Tag[]

  @@map("users")
}

model Category {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  name        String
  description String?
  color       String   @default("#6B7280")
  parentId    Int?     @map("parent_id")
  sortOrder   Int      @default(0) @map("sort_order")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent      Category? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryHierarchy")
  prompts     Prompt[]

  @@map("categories")
}

model Tag {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  name      String
  color     String   @default("#6B7280")
  createdAt DateTime @default(now()) @map("created_at")

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  promptTags  PromptTag[]

  @@unique([userId, name])
  @@map("tags")
}

model Prompt {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  title        String
  content      String
  description  String?
  categoryId   Int?     @map("category_id")
  variables    String   @default("[]")
  metadata     String   @default("{}")
  isFavorite   Boolean  @default(false) @map("is_favorite")
  isPublic     Boolean  @default(false) @map("is_public")
  usageCount   Int      @default(0) @map("usage_count")
  lastUsedAt   DateTime? @map("last_used_at")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  deletedAt    DateTime? @map("deleted_at")

  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  category     Category?        @relation(fields: [categoryId], references: [id])
  tags         PromptTag[]
  versions     PromptVersion[]

  @@map("prompts")
}

model PromptTag {
  id        Int      @id @default(autoincrement())
  promptId  Int      @map("prompt_id")
  tagId     Int      @map("tag_id")
  createdAt DateTime @default(now()) @map("created_at")

  prompt    Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([promptId, tagId])
  @@map("prompt_tags")
}

model PromptVersion {
  id            Int      @id @default(autoincrement())
  promptId      Int      @map("prompt_id")
  versionNumber Int      @map("version_number")
  title         String
  content       String
  description   String?
  variables     String   @default("[]")
  changeLog     String?  @map("change_log")
  createdAt     DateTime @default(now()) @map("created_at")
  createdBy     Int      @map("created_by")

  prompt        Prompt   @relation(fields: [promptId], references: [id], onDelete: Cascade)

  @@unique([promptId, versionNumber])
  @@map("prompt_versions")
}