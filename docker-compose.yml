version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: prompt-collection-db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-prompt_collection}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API
  backend:
    build:
      context: .
      target: backend-runner
    container_name: prompt-collection-backend
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-password}@database:5432/${POSTGRES_DB:-prompt_collection}
      JWT_SECRET: ${JWT_SECRET:-your-super-secret-jwt-key-here}
      JWT_EXPIRES_IN: ${JWT_EXPIRES_IN:-7d}
      CORS_ORIGIN: ${CORS_ORIGIN:-http://localhost:3000}
    ports:
      - "8080:8080"
    depends_on:
      database:
        condition: service_healthy
    networks:
      - app-network
    volumes:
      - backend_uploads:/app/uploads
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Web App
  frontend:
    build:
      context: .
      target: frontend-runner
    container_name: prompt-collection-frontend
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: http://backend:8080
      NEXT_PUBLIC_APP_URL: http://localhost:3000
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - app-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: prompt-collection-redis
    ports:
      - "6379:6379"
    networks:
      - app-network
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data

volumes:
  postgres_data:
  redis_data:
  backend_uploads:

networks:
  app-network:
    driver: bridge